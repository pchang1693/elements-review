/* Name: Portia Chang
 * Date: July 22, 2017
 * Title: Learning Should Be Done PERIODICALLY!
 * Purpose: To teach grade 9 students the first 20 elements in the periodic table
 */

import javax.swing.JOptionPane;

public class U4_Step_3_Implementation extends javax.swing.JFrame {

    /**
     * Creates new form U4_Step_3_Implementation
     */
    public U4_Step_3_Implementation() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblScreenTitle = new javax.swing.JLabel();
        lblTitle = new javax.swing.JLabel();
        btnHangman = new javax.swing.JButton();
        btnEnter = new javax.swing.JButton();
        txtInput = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        btnUnscramble = new javax.swing.JButton();
        btnLesson = new javax.swing.JButton();
        btnQuiz = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jPanel1.setBackground(new java.awt.Color(233, 255, 194));
        jPanel1.setBorder(javax.swing.BorderFactory.createMatteBorder(25, 25, 25, 25, new javax.swing.ImageIcon(getClass().getResource("/green_sparkles_by_dracoster-d46g933.jpg")))); // NOI18N

        lblScreenTitle.setFont(new java.awt.Font("Myriad Web Pro", 1, 20)); // NOI18N
        lblScreenTitle.setForeground(new java.awt.Color(51, 153, 0));
        lblScreenTitle.setText("Lesson - The first 20 elements");

        lblTitle.setFont(new java.awt.Font("Myriad Web Pro", 1, 26)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(0, 153, 153));
        lblTitle.setText("Learning Should Be Done PERIODICALLY!");

        btnHangman.setBackground(new java.awt.Color(255, 244, 176));
        btnHangman.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        btnHangman.setForeground(new java.awt.Color(255, 153, 0));
        btnHangman.setText("Hangman");
        btnHangman.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new javax.swing.ImageIcon(getClass().getResource("/gold-sparkle-gold-glitter.jpg")))); // NOI18N
        btnHangman.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHangmanActionPerformed(evt);
            }
        });

        btnEnter.setBackground(new java.awt.Color(171, 228, 200));
        btnEnter.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        btnEnter.setForeground(new java.awt.Color(0, 102, 51));
        btnEnter.setText("Enter");
        btnEnter.setEnabled(false);
        btnEnter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnterActionPerformed(evt);
            }
        });

        txtInput.setEnabled(false);
        txtInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtInputActionPerformed(evt);
            }
        });

        textArea.setEditable(false);
        textArea.setBackground(new java.awt.Color(239, 255, 239));
        textArea.setColumns(20);
        textArea.setFont(new java.awt.Font("Trebuchet MS", 0, 13)); // NOI18N
        textArea.setForeground(new java.awt.Color(0, 102, 102));
        textArea.setLineWrap(true);
        textArea.setRows(5);
        textArea.setText("Below you'll find a list of the first 20 elements in the periodic table.\nYou should remember their atomic numbers and their symbols as well.\nThe capital first letter in symbols is very important!\n\n-----------------------------------------------------------\nAtomic #\tElement\t            Symbols\n-----------------------------------------------------------\n  1\tHydrogen\t            H\n  2\tHelium\t            He\n  3\tLithium\t            Li\n  4\tBeryllium\t            Be\n  5\tBoron\t            B\n  6\tCarbon\t            C\n  7\tNitrogen\t            N\n  8\tOxygen\t            O\n  9\tFluorine\t            F\n  10\tNeon    \t            Ne\n  11\tSodium\t            Na\n  12\tMagnesium\t            Mg\n  13\tAluminum\t            Al\n  14\tSilicon\t            Si\n  15\tPhosphorous\t            P\n  16\tSulfur\t            S\n  17\tChlorine\t            Cl\n  18\tArgon\t            Ar\n  19\tPotassium\t            K\n  20\tCalcium\t            Ca\n\nNow that you've learned the first 20 elements, go try out the two games!\nIf you get an answer correct, you'll get a point! But if you get an answer wrong, you'll lose a point!\n\nWhen you think you're ready for the quiz, go for it! Or come back here to review. It's up to you! Have fun!");
        textArea.setWrapStyleWord(true);
        textArea.setCaretColor(new java.awt.Color(255, 0, 0));
        jScrollPane1.setViewportView(textArea);

        btnUnscramble.setBackground(new java.awt.Color(198, 242, 255));
        btnUnscramble.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        btnUnscramble.setForeground(new java.awt.Color(51, 153, 255));
        btnUnscramble.setText("Unscramble");
        btnUnscramble.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new javax.swing.ImageIcon(getClass().getResource("/blue-sparkles-blue-glitter.jpg")))); // NOI18N
        btnUnscramble.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUnscrambleActionPerformed(evt);
            }
        });

        btnLesson.setBackground(new java.awt.Color(242, 208, 255));
        btnLesson.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        btnLesson.setForeground(new java.awt.Color(153, 0, 153));
        btnLesson.setText("Lesson");
        btnLesson.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new javax.swing.ImageIcon(getClass().getResource("/purple-glitter-purple-sparkles.jpg")))); // NOI18N
        btnLesson.setEnabled(false);
        btnLesson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLessonActionPerformed(evt);
            }
        });

        btnQuiz.setBackground(new java.awt.Color(255, 197, 197));
        btnQuiz.setFont(new java.awt.Font("Trebuchet MS", 1, 14)); // NOI18N
        btnQuiz.setForeground(new java.awt.Color(255, 0, 51));
        btnQuiz.setText("Quiz");
        btnQuiz.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new javax.swing.ImageIcon(getClass().getResource("/sparkles-glitter-red-glitter.jpg")))); // NOI18N
        btnQuiz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuizActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblScreenTitle)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(btnLesson, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(30, 30, 30)
                            .addComponent(btnUnscramble, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnHangman, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(31, 31, 31)
                            .addComponent(btnQuiz, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 475, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 497, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(txtInput, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnEnter, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(lblScreenTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnEnter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtInput, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnHangman, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnLesson, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnQuiz, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnUnscramble, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    //Creating String arrays with element names, element symbols, and scrambled element names
    String[] strElements = {"", "Hydrogen", "Helium", "Lithium", "Beryllium", "Boron", "Carbon", "Nitrogen", "Oxygen", "Fluorine", 
        "Neon", "Sodium", "Magnesium", "Aluminum", "Silicon", "Phosphorous", "Sulfur", "Chlorine", "Argon", "Potassium", "Calcium"};
    String[] strSymbols = {"", "H", "He", "Li", "Be", "B", "C", "N", "O", "F", "Ne", "Na", "Mg", "Al", "Si", "P", "S", "Cl", "Ar", "K", "Ca"};
    String[] strScrambled = {"", "hegordyn", "hueilm", "lutihim", "belluryim", "broon", "croban", "notigern", "ogexyn", "fourline",
        "noen", "sidoum", "maisengum", "ailnumum", "scoilin", "poshhourpus", "slufur", "chilorne", "agorn", "paistosum", "cucailm"};
    
    /* Declaring strInput as user's input, intMenu to identify which screen the user is on (to determine what function the 
       enter button has), and intRdm as a random number  */
    String strInput;
    int intMenu;
    int intRdm;
    //Declaring and initializing intPoints as the user's game points
    int intPoints=0;
    
    //Declaring and initializing intHangmanWrong as the number of wrong letter guesses in the hangman game
    int intHangmanWrong=0;
    //Declaring and initializing strBlanks as the empty spaces in the hangman game
    String strBlanks="";
    //Declaring and initializing strAnswer as the answer to the hangman game
    String strAnswer;
    
    //Declaring and initializing intQuizCounter as the question number of the quiz
    int intQuizCounter=1;
    //Declaring strSolution as the answer to a quiz question
    String strSolution;
    //Declaring and initializing intCorrect as the number of questions the user got correct on the quiz
    int intCorrect=0;
    
    private void btnLessonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLessonActionPerformed
        
        //Setting intMenu to be 1 for the lesson
        intMenu = 1;
        //Calling the enableButtons() method to disable the input field, enter button, and lesson button
        enableButtons(false, false, false, true, true, true);
        //Calling the setTitles() method to set the titles of the screen
        setTitles("Learning Should Be Done PERIODICALLY!", "Lesson: The first 20 elements");
        
        //Declaring and initializing strAll as the lesson (here, the introduction to the lesson)
        String strAll = "Below you'll find a list of the first 20 elements in the periodic table."
                + "\nYou should remember their atomic numbers and their symbols as well."
                + "\nThe capital first letter in symbols is very important!"
                + "\n\n-----------------------------------------------------------"
                + "\nAtomic #\tElement\t            Symbols"
                + "\n-----------------------------------------------------------\n";
        //Calling the printArrays() method to add the elements and symbols to the lesson
        strAll += printArrays(strElements, strSymbols);
        //Adding the end of the lesson to strAll
        strAll += "\nNow that you've learned the first 20 elements, go try out the two games!"
                + "\nIf you get an answer correct, you'll get a point! But if you get an answer wrong, you'll lose a point!"
                + "\n\nWhen you think you're ready for the quiz, go for it! Or come back here to review. It's up to you! Have fun!";
        
        //Setting the textArea's text to strAll
        this.textArea.setText(strAll);
        //Setting the text of the input field to "" (nothing)
        this.txtInput.setText("");
        
    }//GEN-LAST:event_btnLessonActionPerformed

    private void btnUnscrambleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUnscrambleActionPerformed
        
        //Setting intMenu to be 2 for the unscramble game
        intMenu=2;
        //Calling the enableButton() method to disable the unscramble button and enable all other buttons
        enableButtons(true, true, true, false, true, true);
        //Setting the titles of the screen
        setTitles("Word Unscramble!       Your total points: " + intPoints, "Which element is hidden in the scrambled word?");
        
        //Calling the random() method to return a random number from 1 to 20
        intRdm = random();
        //Setting the text of the textArea to be the scrambled word and a hint with the element's number
        this.textArea.setText("\n\n\n\n\n" + strScrambled[intRdm] + "\nHint: This element is atomic number " + intRdm);
        
    }//GEN-LAST:event_btnUnscrambleActionPerformed

    private void btnHangmanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHangmanActionPerformed
        
        //Setting intMenu to be 3 for the hangman game
        intMenu=3;
        //Calling the enableButton() method to disable the hangman button and enable all other buttons
        enableButtons(true, true, true, true, false, true);
        //Setting the titles of the screen
        setTitles("Hangman!          Your total points: " + intPoints, "Enter a letter and guess the element!");
        
        //Calling the resetHangman() method to begin the hangman game
        resetHangman();
        
    }//GEN-LAST:event_btnHangmanActionPerformed

    private void btnQuizActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuizActionPerformed
        
        //Setting intMenu to be 4 for the quiz
        intMenu=4;
        //Calling the enableButton() method to disable the quiz button and enable all other buttons
        enableButtons(true, true, true, true, true, false);
        //Setting the titles of the screen
        setTitles("Quiz!", "Test what you've learned. Good luck!");
        
        //Setting the text of the textArea to be the quiz instructions and the first question using the getQuestion() method
        this.textArea.setText("Start the quiz by answering question 1! \nThere are 15 questions in total. \nOnce you begin, you cannot return to the lesson or the games until you are finished. \nGive element answers with the first letter capitalized (for example, Helium). \n\n" + intQuizCounter + ". " + getQuestion());
        
    }//GEN-LAST:event_btnQuizActionPerformed

    private void btnEnterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnterActionPerformed
        
        //Assigning the value of the user input to strInput
        strInput = this.txtInput.getText();
        
        //If intMenu is 2 (the Unscramble screen), then the wordUnscramble() method will be called
        if (intMenu==2){
            wordUnscramble();
        }
        
        //If intMenu is 3 (the Hangman screen), then the hangmanGame() method will be called
        if (intMenu==3){
            hangmanGame();
        }
        
        //If intMenu is 4 (the Quiz screen), then all the buttons except user input and Enter will be disabled, and the quiz() method will be called
        if (intMenu==4){
            enableButtons(true, true, false, false, false, false);
            quiz();
        }
        
    }//GEN-LAST:event_btnEnterActionPerformed

    private void txtInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtInputActionPerformed
        
        /* The ActionPerformed of the txtInput field does the same thing as the Enter button, if the user prefers to hit the
           'Enter' key on their keyboard instead of clicking the Enter button */
        
        strInput = this.txtInput.getText();
        if (intMenu==2){
            wordUnscramble();
        }
        
        if (intMenu==3){
            hangmanGame();
        }
        
        if (intMenu==4){
            enableButtons(true, true, false, false, false, false);
            quiz();
        }
    }//GEN-LAST:event_txtInputActionPerformed

    //enableButtons() method with boolean parameters -- determines which buttons (and text field) are enabled and which are disabled
    private void enableButtons(boolean blnInput, boolean blnEnter, boolean blnLesson, boolean blnUnscramble, boolean blnHangman, boolean blnQuiz){
        this.txtInput.setEnabled(blnInput);
        this.btnEnter.setEnabled(blnEnter);
        this.btnLesson.setEnabled(blnLesson);
        this.btnUnscramble.setEnabled(blnUnscramble);
        this.btnHangman.setEnabled(blnHangman);
        this.btnQuiz.setEnabled(blnQuiz);
    }
    
    //setTitles() method with String parameters for the two titles -- allows different titles to be set depending on the screen
    private void setTitles(String strTitle, String strScreenTitle){
        this.lblTitle.setText(strTitle);
        this.lblScreenTitle.setText(strScreenTitle);
    }
    
    //printArrays() method with String array parameters -- prints out each value of the element array and the symbol array
    private String printArrays(String[] array1, String[] array2){
        //Declaring and initializing strOutput as the 'sum' of the Strings with the array values
        String strOutput="";
        //for loop - beginning at 1 and repeating until 20 for the 20 elements in the arrays
        for(int i=1 ; i < 21 ; i++){
            strOutput += "  " + i + "\t" + array1[i] + "\t            " + array2[i] + "\n";
        }
        //Returning strOutput
        return strOutput;
    }
    
    //random() method -- generates a random number from 1 to 20 (for use in the games and the quiz)
    private int random(){
        //Declaring and initializing int x as the random number, using Math methods
        int x = (int) Math.floor(Math.random()*20) + 1;
        //Returning the random number
        return x;
    }
    
    //wordUnscramble() method -- method for the unscramble game
    private void wordUnscramble(){
        /*If the user input (ignoring the case of the letters) equals the element with index intRdm in the array, they gain a 
          point and a JOptionPane dialog appears to tell them that they were correct */
        if (strInput.equalsIgnoreCase(strElements[intRdm])){
            intPoints++;
            JOptionPane.showMessageDialog(null, "Correct! You gained a point!");
        }
        
        /*If the user input does not equal the element with index intRdm in the array, they lose a point and a JOptionPane
          dialog appears to tell them the correct answer */
        else{
            intPoints--;
            JOptionPane.showMessageDialog(null, "Nope! The correct answer was " + strElements[intRdm] + ". You lost a point!");
        }
        
        //Generating a new random number with the random() method
        intRdm = random();
        
        //Setting the text of the textArea to be the new scrambled word
        this.textArea.setText("\n\n\n\n\n" + strScrambled[intRdm] + "\nHint: This element is atomic number " + intRdm);
        //Updating the text of the title to show the user's total game points
        this.lblTitle.setText("Word Unscramble!       Your total points: " + intPoints);
        //Clearing the text of the input field
        this.txtInput.setText("");
    }
    
    //hangmanGame() method -- method for the Hangman game
    private void hangmanGame(){
        //Declaring and initializing blnCheck to be whether the user's letter guess was correct or not
        boolean blnCheck = false;
        //Declaring strJOPInput to be the user input from the JOptionPane input dialog
        String strJOPInput;
        //Using the toLowerCase() method to assign the lowercase of strInput to strInput
        strInput = strInput.toLowerCase();
        
        //If the user enters a number, they will be prompted to enter a letter
        if (strInput.matches("^\\d+(\\.\\d+)?")){
            JOptionPane.showMessageDialog(null, "Please enter a letter!");
        }
        
        //If the user enters more than one character, they will be prompted to enter only one letter
        else if (strInput.length() > 1){
            JOptionPane.showMessageDialog(null, "Only one letter at a time!");
        }
        
        //If the user enters one letter:
        else{
            //for loop - repeating for the length of the blank word
            for (int i = 0 ; i < strAnswer.length() ; i++){
                //If the first character of the user input equals a character in the answer, then the following code will execute
                if (strInput.charAt(0) == strAnswer.charAt(i)){
                    //Replacing the correct blank in strBlanks with the user's input
                    strBlanks = strBlanks.substring(0, i) + strInput.charAt(0) + strBlanks.substring(i+1);
                    //blnCheck becomes true
                    blnCheck=true;
                }
            }
        
            //If blnCheck is false (the user's guess was wrong), then 1 is added to the number of incorrect guesses the user made
            if (!blnCheck){
                intHangmanWrong++;
            }
            
            //Updating the text of the textArea to show the number of incorrect guesses and the updated strBlanks
            this.textArea.setText("\n\n\nPlease enter only one letter at a time. \nDon't make 3 incorrect guesses! \nYou have made " + intHangmanWrong + " incorrect guesses. \n\n" + strBlanks);
            //Clearing the text of the input field
            this.txtInput.setText("");
            
            //If strBlanks equals strAnswer (the user has solved the word completely), then the following code is executed
            if (strBlanks.equals(strAnswer)){
                //User gains 1 game point
                intPoints++;
                //Getting the user input from a JOptionPane input dialog asking the user for the symbol of the element
                strJOPInput = JOptionPane.showInputDialog("You got it! For an extra point, what is the symbol of this element?");
                //If the user's input is correct (matching the symbol with index intRdm in the strSymbols array), they gain an extra point and are shown a message dialog
                if (strJOPInput.equals(strSymbols[intRdm])){
                    intPoints++;
                    JOptionPane.showMessageDialog(null, "Awesome! You got 2 points!");
                }
                //If the user's input is incorrect, they are shown the right answer
                else{
                    JOptionPane.showMessageDialog(null, "Sorry! The right answer was " + strSymbols[intRdm] + ". But you still get 1 point!");
                }
                
                //Calling the resetHangman() method to reset the hangman game
                resetHangman();
            }
            
            //If user has made 3 incorrect guesses, then they are shown the correct answer and lose a point, and the game is reset
            else if (intHangmanWrong > 2){
                JOptionPane.showMessageDialog(null, "Sorry! You made 3 incorrect guesses. The right answer was " + strElements[intRdm] + ". You lose a point!");
                intPoints--;
                resetHangman();
            }
        }
    }
    
    //resetHangman() method -- resetting the hangman game
    private void resetHangman(){
        //Setting number of incorrect guesses to 0
        intHangmanWrong=0;
        //Generating a new random number using the random() method
        intRdm = random();
        //Retrieving a new answer using the random number and the toLowerCase() method
        strAnswer = strElements[intRdm].toLowerCase();
        //Resetting strBlanks
        strBlanks = "";
        //for loop - adding a "~" for each character in the word
        for (int i = 0 ; i < strAnswer.length() ; i++){
            strBlanks += "~";
        }
        
        //Showing the new game in the textArea
        this.textArea.setText("\n\n\nPlease enter only one letter at a time. \nDon't make 3 incorrect guesses! \nYou have made 0 incorrect guesses. \n\n" + strBlanks);
        //Updating the title to reflect the total number of game points
        this.lblTitle.setText("Hangman!    Your total points: " + intPoints);
        //Clearing the text of the input field
        this.txtInput.setText("");
    }
    
    //quiz() method -- method for the quiz
    private void quiz(){
        //If the user input equals the answer to the question, 1 is added to their mark and are shown a message dialog with "Correct!"
        if(strInput.equals(strSolution)){
            JOptionPane.showMessageDialog(null, "Correct!");
            intCorrect++;
        }
        //If the user input is incorrect, they are shown a message dialog stating that they are incorrect
        else{
            JOptionPane.showMessageDialog(null, "Incorrect!");
        }
        
        //Adding 1 to the question number
        intQuizCounter++;
        //If the user has completed 15 questions, they are shown their score, the buttons are reenabled and the correct and question counters are reset
        if (intQuizCounter > 15){
            this.textArea.setText("Congratulations! You finished the quiz! \n\nYou got " + intCorrect + " correct out of 15. \n\nIf you want to do another quiz, exit and reenter the quiz screen.");
            enableButtons(false, false, true, true, true, false);
            intCorrect=0;
            intQuizCounter=1;
        }
        //If the user is not finished the quiz yet, another question is shown using the getQuestion() method
        else{
            this.txtInput.setText("");
            this.textArea.setText(intQuizCounter + ". " + getQuestion());
        }
    }
    
    //getQuestion() method -- creating a new random question for the quiz (the quiz will be different each time)
    private String getQuestion(){
        //Declaring and initializing intRandomQuestion as a random number between 1 and 4 for the four types of questions
        int intRandomQuestion = (int) Math.floor(Math.random()*4) + 1;
        //Generating a random number from 1 to 20 using the random() method
        intRdm = random();
        //Declaring strQuestion as the quiz question
        String strQuestion;
        
        /*Switch statement -- depending on intRandomQuestion, a certain type of question is used for the question, and the
          number from 1 to 20 is the random element used in the question 
          strSolution is the answer to the quiz question */
        switch (intRandomQuestion){
            case 1:
                strQuestion = "What element has symbol " + strSymbols[intRdm] + "?";
                strSolution = strElements[intRdm];
                break;
            case 2:
                strQuestion = "What element has atomic number " + intRdm + "?";
                strSolution = strElements[intRdm];
                break;
            case 3:
                strQuestion = "What is the symbol of " + strElements[intRdm] + "?";
                strSolution = strSymbols[intRdm];
                break;
            case 4:
                strQuestion = "What is the atomic number of " + strElements[intRdm] + "?";
                strSolution = Integer.toString(intRdm);
                break;
            default:
                strQuestion = "question here";
                strSolution = "solution here";
                break;
        }
        //Returning strQuestion
        return strQuestion;
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(U4_Step_3_Implementation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(U4_Step_3_Implementation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(U4_Step_3_Implementation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(U4_Step_3_Implementation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new U4_Step_3_Implementation().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEnter;
    private javax.swing.JButton btnHangman;
    private javax.swing.JButton btnLesson;
    private javax.swing.JButton btnQuiz;
    private javax.swing.JButton btnUnscramble;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblScreenTitle;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTextArea textArea;
    private javax.swing.JTextField txtInput;
    // End of variables declaration//GEN-END:variables
}
